#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander')
  , tea = require('tea')
  , path = require('path')
  , fs = require('fs')
  , inspect = require('eyes').inspector()
  , colors = require('colors')
  , connect = require('connect')
  , ncp = require('ncp').ncp
  , Codex = require('../');


var cwd = process.cwd();

program
  .version(Codex.version)
  .option('-o, --out [dir]', 'Specify an out directory for build, defaults to `__inPath__/out`')
  .option('-s, --static [dir]', 'Specify the folder path to mount the static server at.');

setTimeout(function() {
  var b = 'c';
}, 1000);

program
  .command('build [inpath]')
  .description('Render site.')
  .action(function (directory) {
    var inDir = directory || cwd
      , outDir = program.out || path.join(cwd, 'out');

    if (!tea.isPathAbsolute(outDir))
      outDir = path.resolve(cwd, outDir);

    var codex = new Codex(inDir, outDir);

    codex.on('status', function (status) {
      var message = status.message.green + ( (status.target) ? ': '.green + status.target.blue : '' );
      console.log('✓   '.green.bold + message);
      if (status.array) {
        status.array.forEach(function (line) {
          console.log('    ' + line.blue);
        });
      }
    });

    codex.on('error', function (error) {
      console.log('✗   '.red.bold + error.message.red);
      inspect(error.data);
      process.exit();
    });

    codex.build();
  });

program
  .command('skeleton [dirname]')
  .description('Create a skeleton site. Defaults to current working directory.')
  .action(function (directory) {

    if (directory) {
      if (!tea.isPathAbsolute(outDir))
        directory = path.resolve(cwd, directory);
    } else {
      directory = cwd;
    }

    console.log('');

    if (!path.existsSync(directory)) {
      console.log('  ✗ '.red.bold + 'Path for skeleton does not exist.'.red);
      process.exit();
    }

    fs.readdir(directory, function(err, list) {
      var copy = function () {
        ncp(path.join(__dirname, '..', 'skeleton'), directory, function (err) {
          if (err) throw err;
          console.log('  ✓ '.green.bold + 'Skeleton successfully created.');
          console.log('    ' + directory.blue);
        });
      };

      if (list.length > 0) {
        program.confirm('Directory isn\'t empty, are you sure you want to continue?'.yellow + ' ', function (ok) {
          if (ok) {
            copy();
          } else {
            console.log('✗   '.yellow.bold + 'Skeleton creation cancelled by used.'.yellow);
          }
          process.stdin.destroy();
        });
      } else {
        copy();
      }
    });
  });

program
  .command('serve [port]')
  .description('Starts a static server to view the generated files. Use -o to indicated what directory to serve.')
  .action(function (port) {
    var outDir = program.out || path.join(cwd, 'out');

    if (outDir.substr(0, 1) != '/')
      outDir = path.resolve(cwd, outDir);

    var getp = (program.static) ? (program.static) : '';

    port = port || 1227;
    var app = connect.createServer();
    app.use(getp, connect.static(outDir));
    app.listen(port);
    console.log('✓   '.green.bold + 'Static server successfully started on port ['.blue + port.toString().blue + ']'.blue);

  });

program.parse(process.argv);